module.identity.data.local_file.pgp_key: Reading...
module.identity.data.local_file.pgp_key: Read complete after 0s [id=bf94b64c8e07c838255c740fe44d09de9b0fe8bf]
module.networking.data.aws_availability_zones.available: Reading...
module.identity.aws_iam_group.administrators: Refreshing state... [id=administrators]
module.identity.aws_iam_user.devadmin: Refreshing state... [id=dev-admin]
module.networking.aws_eip.efs_natgw_eip[0]: Refreshing state... [id=eipalloc-0ab16259135b4cc9b]
module.networking.aws_vpc.efs_vpc: Refreshing state... [id=vpc-06a2930917c507ce2]
module.networking.data.aws_availability_zones.available: Read complete after 1s [id=us-east-1]
module.networking.random_shuffle.az_list: Refreshing state... [id=-]
module.identity.aws_iam_access_key.dev_iam_admin_keys: Refreshing state... [id=AKIAX3HPOH57GTZOGLER]
module.identity.aws_iam_group_policy_attachment.administrators-attach: Refreshing state... [id=administrators-20220922112213679500000001]
module.identity.aws_iam_user_group_membership.admins-membership: Refreshing state... [id=terraform-20220922140845646000000001]
module.networking.aws_subnet.efs_public_subnet[0]: Refreshing state... [id=subnet-05a15868d275e472f]
module.networking.aws_default_route_table.default_vpc_main_route_table: Refreshing state... [id=rtb-00eb9f35ab0e73339]
module.networking.aws_internet_gateway.efs_internet_gateway: Refreshing state... [id=igw-0eb56b8ceb2b8e53f]
module.networking.aws_subnet.efs_private_subnet[0]: Refreshing state... [id=subnet-070bb79ad335f7f42]
module.networking.aws_route_table.efs_public_rt: Refreshing state... [id=rtb-0f7262a971bccbda9]
module.networking.aws_route_table.efs_private_rt: Refreshing state... [id=rtb-02a415e92419b9a7c]
module.networking.aws_security_group.efs_sg_alb: Refreshing state... [id=sg-034cfae7a20ca60b8]
module.networking.aws_nat_gateway.efs_natgw[0]: Refreshing state... [id=nat-0f273e27f116010aa]
module.networking.aws_route_table_association.efs_public_assoc[0]: Refreshing state... [id=rtbassoc-03d224172a00aea22]
module.networking.aws_route.default_public_route: Refreshing state... [id=r-rtb-0f7262a971bccbda91080289494]
module.networking.aws_route_table_association.efs_private_assoc[0]: Refreshing state... [id=rtbassoc-0da4ffd265e34a96f]
module.networking.aws_route.default_private_route[0]: Refreshing state... [id=r-rtb-02a415e92419b9a7c1080289494]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # module.networking.aws_security_group.efs_sg_alb must be replaced
-/+ resource "aws_security_group" "efs_sg_alb" {
      ~ arn                    = "arn:aws:ec2:us-east-1:539520548734:security-group/sg-034cfae7a20ca60b8" -> (known after apply)
      ~ description            = "Managed by Terraform" -> "Security group for efs alb" # forces replacement
      ~ id                     = "sg-034cfae7a20ca60b8" -> (known after apply)
        name                   = "efs-alb-sg"
      + name_prefix            = (known after apply)
      ~ owner_id               = "539520548734" -> (known after apply)
      ~ tags                   = {
          ~ "Name" = "alb_sg" -> "efs-alb-sg"
        }
      ~ tags_all               = {
          ~ "Name" = "alb_sg" -> "efs-alb-sg"
        }
        # (4 unchanged attributes hidden)
    }

  # module.networking.aws_security_group.efs_sg_ecs_task will be created
  + resource "aws_security_group" "efs_sg_ecs_task" {
      + arn                    = (known after apply)
      + description            = "Security group for efs ecs task"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = [
                  + "::/0",
                ]
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "efs-ecs-task-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "efs-ecs-task-sg"
        }
      + tags_all               = {
          + "Name" = "efs-ecs-task-sg"
        }
      + vpc_id                 = "vpc-06a2930917c507ce2"
    }

Plan: 2 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  ~ efs_alb_security-group_arn = "arn:aws:ec2:us-east-1:539520548734:security-group/sg-034cfae7a20ca60b8" -> (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
